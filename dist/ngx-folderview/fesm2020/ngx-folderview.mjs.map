{"version":3,"file":"ngx-folderview.mjs","sources":["../../../projects/ngx-folderview/src/lib/helpers/ngx-folderview.helper.ts","../../../projects/ngx-folderview/src/lib/services/folderview.service.ts","../../../projects/ngx-folderview/src/lib/services/folderview-event.service.ts","../../../projects/ngx-folderview/src/lib/components/ngx-folderview-item/ngx-folderview-item.component.ts","../../../projects/ngx-folderview/src/lib/components/ngx-folderview-item/ngx-folderview-item.component.html","../../../projects/ngx-folderview/src/lib/directives/ngx-folderview-select.directive.ts","../../../projects/ngx-folderview/src/lib/directives/ngx-folderview-input-controller.directive.ts","../../../projects/ngx-folderview/src/lib/ngx-folderview.component.ts","../../../projects/ngx-folderview/src/lib/ngx-folderview.component.html","../../../projects/ngx-folderview/src/lib/ngx-folderview.module.ts","../../../projects/ngx-folderview/src/public-api.ts","../../../projects/ngx-folderview/src/ngx-folderview.ts"],"sourcesContent":["export class NgxFolderviewHelper {\r\n    static newGuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0,\r\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class NgxFolderViewService {\r\n    /**\r\n     * @TODO models\r\n     */\r\n    private selectedFolderId: any;\r\n    private selectedFolderHTMLElement: HTMLBaseElement;\r\n\r\n    setSelectedFolder(id: any, htmlElement: HTMLBaseElement) {\r\n        this.selectedFolderId = id;\r\n        this.selectedFolderHTMLElement?.classList.remove('selected');\r\n        this.selectedFolderHTMLElement = htmlElement;\r\n        this.selectedFolderHTMLElement.classList.add('selected');\r\n    }\r\n\r\n    getSelectedFolderId(): any {\r\n        return this.selectedFolderId;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class NgxFolderViewEventService {\r\n    folderCollapsed = new Subject<any>();\r\n    folderExpanded = new Subject<any>();\r\n    newFolder = new Subject<any>();\r\n    newSubFolder = new Subject<any>();\r\n    removeFolder = new Subject<any>();\r\n    folderMoveUp = new Subject<any>();\r\n    folderMoveDown = new Subject<any>();\r\n}","import { Component, Input, TemplateRef } from '@angular/core';\nimport { NgxFolderViewEventService } from '../../services/folderview-event.service';\n\n@Component({\n  selector: 'ngx-folderview-item',\n  templateUrl: './ngx-folderview-item.component.html',\n  styleUrls: ['./ngx-folderview-item.component.scss']\n})\nexport class NgxFolderviewItemComponent {\n  @Input() folder: any;\n  @Input() template: TemplateRef<any>;\n  @Input() isTopFolder: boolean;\n  \n  constructor(private ngxFolderviewEventService: NgxFolderViewEventService) { \n  }\n\n  onCollapseExpand = () => {\n    this.folder.collapsed = !this.folder.collapsed;\n    if(this.folder.collapsed) {\n      this.ngxFolderviewEventService.folderCollapsed.next(this.folder);\n    } else {\n      this.ngxFolderviewEventService.folderExpanded.next(this.folder);\n    }\n  }\n\n  onClickRemove = () => {\n    this.ngxFolderviewEventService.removeFolder.next(this.folder);\n  }\n\n  onClickMoveDown = () => {\n    this.ngxFolderviewEventService.folderMoveDown.next(this.folder);\n  }\n\n  onClickMoveUp = () => {\n    this.ngxFolderviewEventService.folderMoveUp.next(this.folder);\n  }\n\n  onClickNewFolder= () => {\n    this.ngxFolderviewEventService.newFolder.next(this.folder);\n  }\n\n  onClickNewSubFolder= () => {\n    this.ngxFolderviewEventService.newSubFolder.next(this.folder);\n  }\n}\n","<div class=\"ngx-folderview-item\">\n    <ng-template [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{folder: folder, onCollapseExpand: onCollapseExpand, onClickRemove: onClickRemove, onClickMoveUp:onClickMoveUp, onClickMoveDown:onClickMoveDown, isTopFolder:isTopFolder}\">\n    </ng-template>\n    <div *ngIf=\"(isTopFolder && !folder.collapsed) || (!folder.collapsed && folder.children?.length > 0)\">\n        <ngx-folderview-item *ngFor=\"let folder of folder.children\" [folder]=\"folder\" [template]=\"template\"></ngx-folderview-item>\n        <div class=\"end-of-leaf\">\n            <img (click)=\"onClickNewFolder()\" src=\"./assets/collapse.png\" alt=\"image\">\n            <img (click)=\"onClickNewSubFolder()\" src=\"./assets/save.png\" alt=\"save\">\n        </div>\n    </div>\n</div>","import { Directive, HostListener, Input, Renderer2 } from '@angular/core';\nimport { NgxFolderNode } from '../models/ngx-folder-node';\nimport { NgxFolderViewService } from '../services/folderview.service';\n\n@Directive({\n  selector: '[ngxFolderviewSelect]'\n})\nexport class NgxFolderviewSelectDirective {\n  @Input() folder: NgxFolderNode;\n\n  constructor(private ngxFolderviewService: NgxFolderViewService, private renderer2: Renderer2) { }\n\n  @HostListener('click', ['$event.target']) onClick(element: HTMLBaseElement) {\n    this.ngxFolderviewService.setSelectedFolder(this.folder.id, element)\n  }\n\n  @HostListener('dblclick') onDblClick() {\n    this.folder.isEditMode = true;\n  }\n}\n","import { AfterViewInit, Directive, ElementRef, HostBinding, HostListener, Input } from '@angular/core';\nimport { NgxFolderNode } from '../models/ngx-folder-node';\n\n@Directive({\n  selector: '[ngxFolderviewInputController]'\n})\nexport class NgxFolderviewInputControllerDirective implements AfterViewInit {\n  @Input() folder: NgxFolderNode;\n\n  constructor(private el: ElementRef<HTMLInputElement>) {}\n\n  @HostListener('blur') onBlur() {\n    this.folder.isEditMode = false;\n  }\n\n  ngAfterViewInit() {\n    this.el.nativeElement.focus();\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { NgxFolderviewHelper } from './helpers/ngx-folderview.helper';\nimport { NgxFolderNode } from './models/ngx-folder-node';\nimport { NgxFolderViewEventService } from './services/folderview-event.service';\nimport { NgxFolderViewService } from './services/folderview.service';\n\n@Component({\n  selector: 'ngx-folderview',\n  templateUrl: './ngx-folderview.component.html',\n  styleUrls: ['./ngx-folderview.component.scss']\n})\nexport class NgxFolderviewComponent {\n\n  @Input() dataSource: Array<NgxFolderNode>\n\n  /**\n   * @TODO\n   */\n  @Input() customTemplate: TemplateRef<any>;\n\n  @Output() onFolderCollapsed = new EventEmitter<any>();\n  @Output() onFolderExpanded = new EventEmitter<any>();\n  @Output() onFolderSelected = new EventEmitter<any>();\n\n\n  constructor(private ngxFolderviewService: NgxFolderViewService, private ngxFolderviewEventService: NgxFolderViewEventService) {\n    this.ngxFolderviewEventService.folderCollapsed.subscribe((folder: any) => {\n      this.onFolderCollapsed.emit(folder);\n    });\n\n    this.ngxFolderviewEventService.folderExpanded.subscribe((folder: any) => {\n      this.onFolderExpanded.emit(folder);\n    });\n\n    this.ngxFolderviewEventService.newFolder.subscribe(this._createNewFolderHandler);\n    this.ngxFolderviewEventService.newSubFolder.subscribe(this._createNewSubFolderHandler);\n    this.ngxFolderviewEventService.removeFolder.subscribe(this._removeFolderHandler);\n    this.ngxFolderviewEventService.folderMoveUp.subscribe(this._folderMoveUpHandler);\n    this.ngxFolderviewEventService.folderMoveDown.subscribe(this._folderMoveDownHandler);\n  }\n\n  private _createNewFolderHandler = (folder: NgxFolderNode) => {\n    const findedFolder = this.findById(folder.id);\n    this.createNewFolder(findedFolder);\n  }\n\n  private _createNewSubFolderHandler = (folder: NgxFolderNode) => {\n    const selectedFolderId = this.ngxFolderviewService.getSelectedFolderId();\n    if (!selectedFolderId) {\n    } else {\n      const findedIndex = folder.children?.findIndex(s => s.id === selectedFolderId) || -1;\n      if(findedIndex < 0)\n        return;\n      const selectedFolder = this.findById(selectedFolderId);\n      this.createNewFolder(selectedFolder);\n    }\n  }\n\n  private _removeFolderHandler = (folder: NgxFolderNode) => {\n    this.removeById(folder.id);\n  }\n\n  private _folderMoveUpHandler = (folder: NgxFolderNode) => {\n    this.moveUpById(folder.id);\n  }\n\n  private _folderMoveDownHandler = (folder: NgxFolderNode) => {\n    this.moveDownById(folder.id);\n  }\n\n  findById(id: any): NgxFolderNode {\n    let result!: NgxFolderNode;\n    const iter = (a: NgxFolderNode) => {\n      if (a.id === id) {\n        result = a;\n        return true;\n      }\n      return Array.isArray(a.children) && a.children.some(iter);\n    }\n    this.dataSource.some(iter);\n    return result;\n  }\n\n  removeById(id: any) {\n    const iter = (item: NgxFolderNode, index: number, arr: Array<NgxFolderNode>) => {\n      if (item.id === id) {\n        arr.splice(index, 1);\n        return true;\n      }\n      return Array.isArray(item.children) && item.children.some(iter);\n    }\n    this.dataSource.some(iter);\n  }\n\n  moveUpById(id: any) {\n    const iter = (item: NgxFolderNode, index: number, arr: Array<NgxFolderNode>) => {\n      if (item.id === id) {\n        if(arr.length > 1 && index !== 0) {\n          let temp= arr[index];\n          arr[index] = arr[index -1];\n          arr[index - 1] = temp;\n        } \n        return true;\n      }\n      return Array.isArray(item.children) && item.children.some(iter);\n    }\n    this.dataSource.some(iter);\n  }\n\n  moveDownById(id: any) {\n    const iter = (item: NgxFolderNode, index: number, arr: Array<NgxFolderNode>) => {\n      if (item.id === id) {\n        if(arr.length > 1 && index !== arr.length - 1) {\n          let temp= arr[index];\n          arr[index] = arr[index + 1];\n          arr[index + 1] = temp;\n        } \n        return true;\n      }\n      return Array.isArray(item.children) && item.children.some(iter);\n    }\n    this.dataSource.some(iter);\n  }\n\n  createNewFolder(folder: NgxFolderNode) {\n    if (!folder.children) {\n      folder.children = new Array<NgxFolderNode>();\n    }\n    folder.children.push({\n      id: NgxFolderviewHelper.newGuid(),\n      title: \"New Folder\",\n      isEditMode: true\n    })\n  }\n}\n","<ng-template #defaultFolderTemplate let-folder=\"folder\" let-onCollapseExpand=\"onCollapseExpand\" let-onClickRemove=\"onClickRemove\" \r\nlet-onClickMoveUp=\"onClickMoveUp\" let-onClickMoveDown=\"onClickMoveDown\" let-isTopFolder=\"isTopFolder\">\r\n    <div class=\"default-folder-template\">\r\n        <span [hidden]=\"folder.isEditMode\" ngxFolderviewSelect [folder]=\"folder\">{{folder.title}}</span>\r\n        <input *ngIf=\"folder.isEditMode\" ngxFolderviewInputController [folder]=\"folder\" type=\"text\" class=\"folder-name-input\" [(ngModel)]=\"folder.title\">\r\n        <div class=\"actions\">\r\n            <div *ngIf=\"!isTopFolder\" (click)=\"onClickRemove()\">\r\n                <img src=\"./assets/times.png\" alt=\"image\">\r\n            </div>\r\n            <div *ngIf=\"!isTopFolder\" (click)=\"onClickMoveUp()\">\r\n                <img src=\"./assets/arrow-up.png\" alt=\"image\">\r\n            </div>\r\n            <div *ngIf=\"!isTopFolder\" (click)=\"onClickMoveDown()\">\r\n                <img src=\"./assets/arrow-down.png\" alt=\"image\">\r\n            </div>\r\n            <div (click)=\"onCollapseExpand()\" [ngSwitch]=\"folder.collapsed\" *ngIf=\"isTopFolder || folder.children?.length > 0\">\r\n                <img *ngIf=\"!folder.collapsed; else elseBlock\" src=\"./assets/expand.png\" alt=\"image\">\r\n                <ng-template #elseBlock>\r\n                    <img *ngIf=\"folder.collapsed\" src=\"./assets/collapse.png\" alt=\"image\">\r\n                </ng-template>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<ng-container *ngFor=\"let folder of dataSource\">\r\n    <ngx-folderview-item [folder]=\"folder\" [template]=\"defaultFolderTemplate || customTemplate\" [isTopFolder]=\"true\"></ngx-folderview-item>\r\n</ng-container>","import { NgModule } from '@angular/core';\nimport { NgxFolderviewComponent } from './ngx-folderview.component';\nimport { NgxFolderviewItemComponent } from './components/ngx-folderview-item/ngx-folderview-item.component';\nimport { CommonModule } from '@angular/common';\nimport { NgxFolderViewService } from './services/folderview.service';\nimport { NgxFolderviewSelectDirective } from './directives/ngx-folderview-select.directive';\nimport { NgxFolderViewEventService } from './services/folderview-event.service';\nimport { FormsModule } from '@angular/forms';\nimport { NgxFolderviewInputControllerDirective } from './directives/ngx-folderview-input-controller.directive';\n\n\n\n@NgModule({\n  declarations: [\n    NgxFolderviewComponent,\n    NgxFolderviewItemComponent,\n    NgxFolderviewSelectDirective,\n    NgxFolderviewInputControllerDirective\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [\n    NgxFolderviewComponent\n  ],\n  providers: [\n    NgxFolderViewService,\n    NgxFolderViewEventService\n  ]\n})\nexport class NgxFolderviewModule { }\n","/*\n * Public API Surface of ngx-folderview\n */\n\nexport * from './lib/ngx-folderview.component';\nexport * from './lib/ngx-folderview.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}