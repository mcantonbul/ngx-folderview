import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../services/folderview-event.service";
import * as i2 from "@angular/common";
export class NgxFolderviewItemComponent {
    constructor(ngxFolderviewEventService) {
        this.ngxFolderviewEventService = ngxFolderviewEventService;
        this.onCollapseExpand = () => {
            this.folder.collapsed = !this.folder.collapsed;
            if (this.folder.collapsed) {
                this.ngxFolderviewEventService.folderCollapsed.next(this.folder);
            }
            else {
                this.ngxFolderviewEventService.folderExpanded.next(this.folder);
            }
        };
        this.onClickRemove = () => {
            this.ngxFolderviewEventService.removeFolder.next(this.folder);
        };
        this.onClickMoveDown = () => {
            this.ngxFolderviewEventService.folderMoveDown.next(this.folder);
        };
        this.onClickMoveUp = () => {
            this.ngxFolderviewEventService.folderMoveUp.next(this.folder);
        };
        this.onClickNewFolder = () => {
            this.ngxFolderviewEventService.newFolder.next(this.folder);
        };
        this.onClickNewSubFolder = () => {
            this.ngxFolderviewEventService.newSubFolder.next(this.folder);
        };
    }
}
NgxFolderviewItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxFolderviewItemComponent, deps: [{ token: i1.NgxFolderViewEventService }], target: i0.ɵɵFactoryTarget.Component });
NgxFolderviewItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: NgxFolderviewItemComponent, selector: "ngx-folderview-item", inputs: { folder: "folder", template: "template", isTopFolder: "isTopFolder" }, ngImport: i0, template: "<div class=\"ngx-folderview-item\">\n    <ng-template [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{folder: folder, onCollapseExpand: onCollapseExpand, onClickRemove: onClickRemove, onClickMoveUp:onClickMoveUp, onClickMoveDown:onClickMoveDown, isTopFolder:isTopFolder}\">\n    </ng-template>\n    <div *ngIf=\"(isTopFolder && !folder.collapsed) || (!folder.collapsed && folder.children?.length > 0)\">\n        <ngx-folderview-item *ngFor=\"let folder of folder.children\" [folder]=\"folder\" [template]=\"template\"></ngx-folderview-item>\n        <div class=\"end-of-leaf\">\n            <img (click)=\"onClickNewFolder()\" src=\"./assets/collapse.png\" alt=\"image\">\n            <img (click)=\"onClickNewSubFolder()\" src=\"./assets/save.png\" alt=\"save\">\n        </div>\n    </div>\n</div>", styles: [".ngx-folderview-item{display:block}.ngx-folderview-item .ngx-folderview-item{margin-left:2rem}.ngx-folderview-item .end-of-leaf{margin-left:2rem}.ngx-folderview-item .end-of-leaf>img{width:1.5rem;height:1.5rem}\n"], components: [{ type: NgxFolderviewItemComponent, selector: "ngx-folderview-item", inputs: ["folder", "template", "isTopFolder"] }], directives: [{ type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: NgxFolderviewItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-folderview-item', template: "<div class=\"ngx-folderview-item\">\n    <ng-template [ngTemplateOutlet]=\"template\"\n        [ngTemplateOutletContext]=\"{folder: folder, onCollapseExpand: onCollapseExpand, onClickRemove: onClickRemove, onClickMoveUp:onClickMoveUp, onClickMoveDown:onClickMoveDown, isTopFolder:isTopFolder}\">\n    </ng-template>\n    <div *ngIf=\"(isTopFolder && !folder.collapsed) || (!folder.collapsed && folder.children?.length > 0)\">\n        <ngx-folderview-item *ngFor=\"let folder of folder.children\" [folder]=\"folder\" [template]=\"template\"></ngx-folderview-item>\n        <div class=\"end-of-leaf\">\n            <img (click)=\"onClickNewFolder()\" src=\"./assets/collapse.png\" alt=\"image\">\n            <img (click)=\"onClickNewSubFolder()\" src=\"./assets/save.png\" alt=\"save\">\n        </div>\n    </div>\n</div>", styles: [".ngx-folderview-item{display:block}.ngx-folderview-item .ngx-folderview-item{margin-left:2rem}.ngx-folderview-item .end-of-leaf{margin-left:2rem}.ngx-folderview-item .end-of-leaf>img{width:1.5rem;height:1.5rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NgxFolderViewEventService }]; }, propDecorators: { folder: [{
                type: Input
            }], template: [{
                type: Input
            }], isTopFolder: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvbGRlcnZpZXctaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZm9sZGVydmlldy9zcmMvbGliL2NvbXBvbmVudHMvbmd4LWZvbGRlcnZpZXctaXRlbS9uZ3gtZm9sZGVydmlldy1pdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1mb2xkZXJ2aWV3L3NyYy9saWIvY29tcG9uZW50cy9uZ3gtZm9sZGVydmlldy1pdGVtL25neC1mb2xkZXJ2aWV3LWl0ZW0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQWUsTUFBTSxlQUFlLENBQUM7Ozs7QUFROUQsTUFBTSxPQUFPLDBCQUEwQjtJQUtyQyxZQUFvQix5QkFBb0Q7UUFBcEQsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtRQUd4RSxxQkFBZ0IsR0FBRyxHQUFHLEVBQUU7WUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUMvQyxJQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO2dCQUN4QixJQUFJLENBQUMseUJBQXlCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDbEU7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2pFO1FBQ0gsQ0FBQyxDQUFBO1FBRUQsa0JBQWEsR0FBRyxHQUFHLEVBQUU7WUFDbkIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQTtRQUVELG9CQUFlLEdBQUcsR0FBRyxFQUFFO1lBQ3JCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxDQUFDLENBQUE7UUFFRCxrQkFBYSxHQUFHLEdBQUcsRUFBRTtZQUNuQixJQUFJLENBQUMseUJBQXlCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEUsQ0FBQyxDQUFBO1FBRUQscUJBQWdCLEdBQUUsR0FBRyxFQUFFO1lBQ3JCLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUE7UUFFRCx3QkFBbUIsR0FBRSxHQUFHLEVBQUU7WUFDeEIsSUFBSSxDQUFDLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQTtJQTdCRCxDQUFDOzt1SEFOVSwwQkFBMEI7MkdBQTFCLDBCQUEwQiwySUNSdkMsd3pCQVdNLHlQREhPLDBCQUEwQjsyRkFBMUIsMEJBQTBCO2tCQUx0QyxTQUFTOytCQUNFLHFCQUFxQjtnSEFLdEIsTUFBTTtzQkFBZCxLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBQ0csV0FBVztzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hGb2xkZXJWaWV3RXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZm9sZGVydmlldy1ldmVudC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LWZvbGRlcnZpZXctaXRlbScsXG4gIHRlbXBsYXRlVXJsOiAnLi9uZ3gtZm9sZGVydmlldy1pdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbmd4LWZvbGRlcnZpZXctaXRlbS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIE5neEZvbGRlcnZpZXdJdGVtQ29tcG9uZW50IHtcbiAgQElucHV0KCkgZm9sZGVyOiBhbnk7XG4gIEBJbnB1dCgpIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICBASW5wdXQoKSBpc1RvcEZvbGRlcjogYm9vbGVhbjtcbiAgXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmd4Rm9sZGVydmlld0V2ZW50U2VydmljZTogTmd4Rm9sZGVyVmlld0V2ZW50U2VydmljZSkgeyBcbiAgfVxuXG4gIG9uQ29sbGFwc2VFeHBhbmQgPSAoKSA9PiB7XG4gICAgdGhpcy5mb2xkZXIuY29sbGFwc2VkID0gIXRoaXMuZm9sZGVyLmNvbGxhcHNlZDtcbiAgICBpZih0aGlzLmZvbGRlci5jb2xsYXBzZWQpIHtcbiAgICAgIHRoaXMubmd4Rm9sZGVydmlld0V2ZW50U2VydmljZS5mb2xkZXJDb2xsYXBzZWQubmV4dCh0aGlzLmZvbGRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmd4Rm9sZGVydmlld0V2ZW50U2VydmljZS5mb2xkZXJFeHBhbmRlZC5uZXh0KHRoaXMuZm9sZGVyKTtcbiAgICB9XG4gIH1cblxuICBvbkNsaWNrUmVtb3ZlID0gKCkgPT4ge1xuICAgIHRoaXMubmd4Rm9sZGVydmlld0V2ZW50U2VydmljZS5yZW1vdmVGb2xkZXIubmV4dCh0aGlzLmZvbGRlcik7XG4gIH1cblxuICBvbkNsaWNrTW92ZURvd24gPSAoKSA9PiB7XG4gICAgdGhpcy5uZ3hGb2xkZXJ2aWV3RXZlbnRTZXJ2aWNlLmZvbGRlck1vdmVEb3duLm5leHQodGhpcy5mb2xkZXIpO1xuICB9XG5cbiAgb25DbGlja01vdmVVcCA9ICgpID0+IHtcbiAgICB0aGlzLm5neEZvbGRlcnZpZXdFdmVudFNlcnZpY2UuZm9sZGVyTW92ZVVwLm5leHQodGhpcy5mb2xkZXIpO1xuICB9XG5cbiAgb25DbGlja05ld0ZvbGRlcj0gKCkgPT4ge1xuICAgIHRoaXMubmd4Rm9sZGVydmlld0V2ZW50U2VydmljZS5uZXdGb2xkZXIubmV4dCh0aGlzLmZvbGRlcik7XG4gIH1cblxuICBvbkNsaWNrTmV3U3ViRm9sZGVyPSAoKSA9PiB7XG4gICAgdGhpcy5uZ3hGb2xkZXJ2aWV3RXZlbnRTZXJ2aWNlLm5ld1N1YkZvbGRlci5uZXh0KHRoaXMuZm9sZGVyKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cIm5neC1mb2xkZXJ2aWV3LWl0ZW1cIj5cbiAgICA8bmctdGVtcGxhdGUgW25nVGVtcGxhdGVPdXRsZXRdPVwidGVtcGxhdGVcIlxuICAgICAgICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie2ZvbGRlcjogZm9sZGVyLCBvbkNvbGxhcHNlRXhwYW5kOiBvbkNvbGxhcHNlRXhwYW5kLCBvbkNsaWNrUmVtb3ZlOiBvbkNsaWNrUmVtb3ZlLCBvbkNsaWNrTW92ZVVwOm9uQ2xpY2tNb3ZlVXAsIG9uQ2xpY2tNb3ZlRG93bjpvbkNsaWNrTW92ZURvd24sIGlzVG9wRm9sZGVyOmlzVG9wRm9sZGVyfVwiPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gICAgPGRpdiAqbmdJZj1cIihpc1RvcEZvbGRlciAmJiAhZm9sZGVyLmNvbGxhcHNlZCkgfHwgKCFmb2xkZXIuY29sbGFwc2VkICYmIGZvbGRlci5jaGlsZHJlbj8ubGVuZ3RoID4gMClcIj5cbiAgICAgICAgPG5neC1mb2xkZXJ2aWV3LWl0ZW0gKm5nRm9yPVwibGV0IGZvbGRlciBvZiBmb2xkZXIuY2hpbGRyZW5cIiBbZm9sZGVyXT1cImZvbGRlclwiIFt0ZW1wbGF0ZV09XCJ0ZW1wbGF0ZVwiPjwvbmd4LWZvbGRlcnZpZXctaXRlbT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImVuZC1vZi1sZWFmXCI+XG4gICAgICAgICAgICA8aW1nIChjbGljayk9XCJvbkNsaWNrTmV3Rm9sZGVyKClcIiBzcmM9XCIuL2Fzc2V0cy9jb2xsYXBzZS5wbmdcIiBhbHQ9XCJpbWFnZVwiPlxuICAgICAgICAgICAgPGltZyAoY2xpY2spPVwib25DbGlja05ld1N1YkZvbGRlcigpXCIgc3JjPVwiLi9hc3NldHMvc2F2ZS5wbmdcIiBhbHQ9XCJzYXZlXCI+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+Il19